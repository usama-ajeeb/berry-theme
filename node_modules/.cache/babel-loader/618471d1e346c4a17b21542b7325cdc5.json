{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\usama\\\\Desktop\\\\TemplateDraft1\\\\src\\\\layout\\\\Customization\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; // import { useDispatch, useSelector } from 'react-redux'\n// material-ui\n\nimport { useTheme } from '@mui/material/styles';\nimport { Drawer, Fab, FormControl, FormControlLabel, Grid, IconButton, Radio, RadioGroup, Slider, Tooltip, Typography } from '@mui/material';\nimport { IconSettings } from '@tabler/icons'; // third-party\n\nimport PerfectScrollbar from 'react-perfect-scrollbar'; // project imports\n\nimport SubCard from 'ui-component/cards/SubCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton'; // import { 3 } from 'store/constant'\n// import { SET_FONT_FAMILY } from 'store/actions'\n// concat 'px'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction valueText(value) {\n  return `${value}px`;\n} // ==============================|| LIVE CUSTOMIZATION ||============================== //\n\n\nconst Customization = () => {\n  _s();\n\n  const theme = useTheme(); // const dispatch = useDispatch()\n  // const customization = useSelector((state) => state.customization)\n  // drawer on/off\n\n  const [open, setOpen] = useState(false);\n\n  const handleToggle = () => {\n    setOpen(!open);\n  }; // state - border radius\n\n  /* const [borderRadius, setBorderRadius] = useState(12);\n    const handleBorderRadius = (event, newValue) => {\n        setBorderRadius(newValue);\n    }; */\n\n  /*  useEffect(() => {\n         dispatch({ type: SET_BORDER_RADIUS, borderRadius });\n     }, [dispatch, borderRadius]); */\n\n\n  let initialFont;\n  /* switch (customization.fontFamily) {\n        case `'Inter', sans-serif`:\n            initialFont = 'Inter';\n            break;\n        case `'Poppins', sans-serif`:\n            initialFont = 'Poppins';\n            break;\n        case `'Roboto', sans-serif`:\n        default:\n            initialFont = 'Roboto';\n            break;\n    } */\n  // state - font family\n\n  const [fontFamily, setFontFamily] = useState(`'Roboto', sans-serif`);\n  /* useEffect(() => {\n        let newFont;\n        switch (fontFamily) {\n            case 'Inter':\n                newFont = `'Inter', sans-serif`;\n                break;\n            case 'Poppins':\n                newFont = `'Poppins', sans-serif`;\n                break;\n            case 'Roboto':\n            default:\n                newFont = `'Roboto', sans-serif`;\n                break;\n        }\n       // dispatch({ type: SET_FONT_FAMILY, fontFamily: newFont });\n    }, [dispatch, fontFamily]); */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n      title: \"Live Customize\",\n      children: /*#__PURE__*/_jsxDEV(Fab, {\n        component: \"div\",\n        onClick: handleToggle,\n        size: \"medium\",\n        variant: \"circular\",\n        color: \"secondary\",\n        sx: {\n          borderRadius: 0,\n          borderTopLeftRadius: '50%',\n          borderBottomLeftRadius: '50%',\n          borderTopRightRadius: '50%',\n          borderBottomRightRadius: '4px',\n          top: '25%',\n          position: 'fixed',\n          right: 10,\n          zIndex: theme.zIndex.speedDial\n        },\n        children: /*#__PURE__*/_jsxDEV(AnimateButton, {\n          type: \"rotate\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"inherit\",\n            size: \"large\",\n            disableRipple: true,\n            children: /*#__PURE__*/_jsxDEV(IconSettings, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n      anchor: \"right\",\n      onClose: handleToggle,\n      open: open,\n      PaperProps: {\n        sx: {\n          width: 280\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(PerfectScrollbar, {\n        component: \"div\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          sx: {\n            p: 3\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Customization, \"AmiuRC1unccyC0OcRZFiwf9q1PU=\", false, function () {\n  return [useTheme];\n});\n\n_c = Customization;\nexport default Customization;\n\nvar _c;\n\n$RefreshReg$(_c, \"Customization\");","map":{"version":3,"sources":["C:/Users/usama/Desktop/TemplateDraft1/src/layout/Customization/index.js"],"names":["useState","useEffect","useTheme","Drawer","Fab","FormControl","FormControlLabel","Grid","IconButton","Radio","RadioGroup","Slider","Tooltip","Typography","IconSettings","PerfectScrollbar","SubCard","AnimateButton","valueText","value","Customization","theme","open","setOpen","handleToggle","initialFont","fontFamily","setFontFamily","borderRadius","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","top","position","right","zIndex","speedDial","sx","width","p"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\n// import { useDispatch, useSelector } from 'react-redux'\n\n// material-ui\nimport { useTheme } from '@mui/material/styles'\nimport {\n  Drawer,\n  Fab,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  Radio,\n  RadioGroup,\n  Slider,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport { IconSettings } from '@tabler/icons'\n\n// third-party\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// project imports\nimport SubCard from 'ui-component/cards/SubCard'\nimport AnimateButton from 'ui-component/extended/AnimateButton'\n// import { 3 } from 'store/constant'\n// import { SET_FONT_FAMILY } from 'store/actions'\n\n// concat 'px'\nfunction valueText(value) {\n  return `${value}px`\n}\n\n// ==============================|| LIVE CUSTOMIZATION ||============================== //\n\nconst Customization = () => {\n  const theme = useTheme()\n  // const dispatch = useDispatch()\n  // const customization = useSelector((state) => state.customization)\n\n  // drawer on/off\n  const [open, setOpen] = useState(false)\n  const handleToggle = () => {\n    setOpen(!open)\n  }\n\n  // state - border radius\n  /* const [borderRadius, setBorderRadius] = useState(12);\n    const handleBorderRadius = (event, newValue) => {\n        setBorderRadius(newValue);\n    }; */\n\n  /*  useEffect(() => {\n         dispatch({ type: SET_BORDER_RADIUS, borderRadius });\n     }, [dispatch, borderRadius]); */\n\n  let initialFont\n  /* switch (customization.fontFamily) {\n        case `'Inter', sans-serif`:\n            initialFont = 'Inter';\n            break;\n        case `'Poppins', sans-serif`:\n            initialFont = 'Poppins';\n            break;\n        case `'Roboto', sans-serif`:\n        default:\n            initialFont = 'Roboto';\n            break;\n    } */\n\n  // state - font family\n  const [fontFamily, setFontFamily] = useState(`'Roboto', sans-serif`)\n  /* useEffect(() => {\n        let newFont;\n        switch (fontFamily) {\n            case 'Inter':\n                newFont = `'Inter', sans-serif`;\n                break;\n            case 'Poppins':\n                newFont = `'Poppins', sans-serif`;\n                break;\n            case 'Roboto':\n            default:\n                newFont = `'Roboto', sans-serif`;\n                break;\n        }\n       // dispatch({ type: SET_FONT_FAMILY, fontFamily: newFont });\n    }, [dispatch, fontFamily]); */\n\n  return (\n    <>\n      {/* toggle button */}\n      <Tooltip title='Live Customize'>\n        <Fab\n          component='div'\n          onClick={handleToggle}\n          size='medium'\n          variant='circular'\n          color='secondary'\n          sx={{\n            borderRadius: 0,\n            borderTopLeftRadius: '50%',\n            borderBottomLeftRadius: '50%',\n            borderTopRightRadius: '50%',\n            borderBottomRightRadius: '4px',\n            top: '25%',\n            position: 'fixed',\n            right: 10,\n            zIndex: theme.zIndex.speedDial,\n          }}\n        >\n          <AnimateButton type='rotate'>\n            <IconButton color='inherit' size='large' disableRipple>\n              <IconSettings />\n            </IconButton>\n          </AnimateButton>\n        </Fab>\n      </Tooltip>\n\n      <Drawer\n        anchor='right'\n        onClose={handleToggle}\n        open={open}\n        PaperProps={{\n          sx: {\n            width: 280,\n          },\n        }}\n      >\n        <PerfectScrollbar component='div'>\n          <Grid container spacing={3} sx={{ p: 3 }}>\n            {/* <Grid item xs={12}>\n                            <SubCard title=\"Font Family\">\n                                <FormControl>\n                                    <RadioGroup\n                                        aria-label=\"font-family\"\n                                        //value={fontFamily}\n                                        //onChange={(e) => setFontFamily(e.target.value)}\n                                        name=\"row-radio-buttons-group\"\n                                    >\n                                        <FormControlLabel\n                                            value=\"Roboto\"\n                                            control={<Radio />}\n                                            label=\"Roboto\"\n                                            sx={{\n                                                '& .MuiSvgIcon-root': { fontSize: 28 },\n                                                '& .MuiFormControlLabel-label': { color: theme.palette.grey[900] }\n                                            }}\n                                        />\n                                        <FormControlLabel\n                                            value=\"Poppins\"\n                                            control={<Radio />}\n                                            label=\"Poppins\"\n                                            sx={{\n                                                '& .MuiSvgIcon-root': { fontSize: 28 },\n                                                '& .MuiFormControlLabel-label': { color: theme.palette.grey[900] }\n                                            }}\n                                        />\n                                        <FormControlLabel\n                                            value=\"Inter\"\n                                            control={<Radio />}\n                                            label=\"Inter\"\n                                            sx={{\n                                                '& .MuiSvgIcon-root': { fontSize: 28 },\n                                                '& .MuiFormControlLabel-label': { color: theme.palette.grey[900] }\n                                            }}\n                                        />\n                                    </RadioGroup>\n                                </FormControl>\n                            </SubCard>\n                        </Grid> */}\n            {/* <Grid item xs={12}>\n                            <SubCard title=\"Border Radius\">\n                                <Grid item xs={12} container spacing={2} alignItems=\"center\" sx={{ mt: 2.5 }}>\n                                    <Grid item>\n                                        <Typography variant=\"h6\" color=\"secondary\">\n                                            4px\n                                        </Typography>\n                                    </Grid>\n                                     <Grid item xs>\n                                        <Slider\n                                            size=\"small\"\n                                            value={12}\n                                            //onChange={handleBorderRadius}\n                                            getAriaValueText={valueText}\n                                            valueLabelDisplay=\"on\"\n                                            aria-labelledby=\"discrete-slider-small-steps\"\n                                            marks\n                                            step={2}\n                                            min={4}\n                                            max={24}\n                                            color=\"secondary\"\n                                            sx={{\n                                                '& .MuiSlider-valueLabel': {\n                                                    color: 'secondary.light'\n                                                }\n                                            }}\n                                        />\n                                    </Grid> \n                                    <Grid item>\n                                        <Typography variant=\"h6\" color=\"secondary\">\n                                            24px\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </SubCard>\n                        </Grid> */}\n          </Grid>\n        </PerfectScrollbar>\n      </Drawer>\n    </>\n  )\n}\n\nexport default Customization\n"]},"metadata":{},"sourceType":"module"}